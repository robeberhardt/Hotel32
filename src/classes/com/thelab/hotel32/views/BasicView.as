package com.thelab.hotel32.views{	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.*;	import com.greensock.loading.core.LoaderItem;	import com.greensock.loading.display.*;	import com.greensock.loading.display.ContentDisplay;	import com.thelab.hotel32.assets.AssetController;	import com.thelab.hotel32.helpers.Logger;	import com.thelab.hotel32.nav.NavigationController;	import com.thelab.hotel32.nav.TopNavButton;		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;		import org.osflash.signals.Signal;
		public class BasicView extends Sprite 	{				public var ready								: Signal;		public var assetsLoaded							: Signal;		public var transitionStarted					: Signal;		public var transitionFinished					: Signal;		public var navigationUpdater					: Signal;				private var _deepLink							: String;				public var duration								: Number;				public var queue								: LoaderMax;				private var _addToStage							: Boolean;		public var loaded								: Boolean = false;		public var boundButton							: TopNavButton;		public var pageXML								: XMLList;				private var displayObj							: DisplayObject;				public static const TRANSITION_IN				: String = "TRANSITION_IN";		public static const TRANSITION_OUT				: String = "TRANSITION_OUT";				public function BasicView(name:String=null)		{			this.name = name;			pageXML = AssetController.getInstance().configXML..views..*.(name() == this.name);						ready = new Signal();			assetsLoaded = new Signal();			transitionStarted = new Signal(String);			transitionStarted.add(onTransitionStarted);			transitionFinished = new Signal(String);			transitionFinished.add(onTransitionEnded);						// view, subPath String, mode (true = add to history, false = ignore in history)			navigationUpdater = new Signal(BasicView, String);						_deepLink = null						if (stage) { init(); } else { addEventListener(Event.ADDED_TO_STAGE, init); }			}								public function init(e:Event=null):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			x = -1300;			alpha = 0;			visible = false;		}				public function setup():void		{			//		}				public function loadAssets(addToStage:Boolean = false):void		{			queue = new LoaderMax({				name:this.name + "_loader", 				onProgress:progressHandler, 				onComplete:completeHandler, 				onError:errorHandler			});						_addToStage = addToStage;						for each (var asset:XML in pageXML..preload.asset)			{				var url : String = AssetController.getInstance().basePath + asset.@url.toString();								var params:Object = new Object();				params.onProgress = progressHandler;				params.name = asset.@id.toString();				params.estimatedBytes = Number(asset.@bytes);				params.x = Number(asset.@xpos);				params.y = Number(asset.@ypos);													var type : String = url.substr(url.lastIndexOf(".")+1);								switch (true)				{					case (type == "png" || type == "jpg") :						queue.append( new ImageLoader (url, params));						break;										case (type == "swf") :						queue.append( new SWFLoader (url, params));						break;										case (type == "flv" || type == "f4v") :						params.autoPlay = false;						params.bufferTime = 5;						params.bufferMode = true;						var vLoader : VideoLoader = new VideoLoader(url, params);						vLoader.addEventListener(LoaderEvent.INIT, onVideoInit);						queue.append(vLoader);						break;										default :						//						break;				}			}						queue.load();				}				private function onVideoInit(e:LoaderEvent):void		{			e.target.removeEventListener(LoaderEvent.INIT, onVideoInit);			duration = VideoLoader(e.target).duration;		}				public function progressHandler(e:LoaderEvent):void		{			//Logger.log(this + " -- loading: " + e.target.progress, 2);		}				private function completeHandler(e:LoaderEvent):void		{			//Logger.log("loadComplete -- " + this, 1, Logger.LOG_BOTH);			loaded = true;			assetsLoaded.dispatch();		}				private function errorHandler(e:LoaderEvent):void		{			//		}				public function onTransitionStarted(direction:String):void		{			switch (direction)			{				case TRANSITION_IN :					Logger.log("entering " + NavigationController.getInstance().address, 2);					break;								case TRANSITION_OUT :										break;			}		}				public function onTransitionEnded(direction:String):void		{			//		}				public function transitionIn():void		{			transitionStarted.dispatch(TRANSITION_IN);			TweenMax.to(this, .6, { delay: .5, autoAlpha: 1 } );			TweenMax.to(this, 1, { x: 0, ease:Circ.easeInOut, onComplete: sendTransitionFinishedSignal, onCompleteParams: [TRANSITION_IN] } );			}				public function transitionOut():void		{			transitionStarted.dispatch(TRANSITION_OUT);			TweenMax.to(this, 1, { x: 1300, ease:Circ.easeInOut, onComplete: sendTransitionFinishedSignal, onCompleteParams: [TRANSITION_OUT] } );				TweenMax.to(this, .4, { delay: .25, autoAlpha: 0 } );		}				public function sendTransitionFinishedSignal(which:String):void		{			transitionFinished.dispatch(which);			if (which == TRANSITION_OUT) { x = -1300; }		}				public function sendReady():void		{			//Logger.log(this + " -- ready", 2);			ready.dispatch();		}		public function get deepLink():String		{			return _deepLink;		}		public function set deepLink(value:String):void		{			_deepLink = value;		}				override public function toString():String		{			return "[BasicView id: " + name + "]";		}	}}