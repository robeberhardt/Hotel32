package com.thelab.hotel32.views.amenities{	import com.greensock.TweenMax;	import com.greensock.easing.Cubic;	import com.greensock.easing.Quad;	import com.greensock.easing.Sine;	import com.greensock.loading.display.ContentDisplay;	import com.thelab.hotel32.AmenityDetailBackground;	import com.thelab.hotel32.CloseBox;	import com.thelab.hotel32.assets.fonts.FontLibrary;	import com.thelab.hotel32.helpers.BasicCopyBlock;	import com.thelab.hotel32.helpers.CaretTextTag;	import com.thelab.hotel32.helpers.Logger;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.text.TextField;		import org.osflash.signals.Signal;	import org.osflash.signals.natives.NativeSignal;
		public class AmenityDetail extends Sprite	{		private var holder									: Sprite;		private var bg										: AmenityDetailBackground;		private var cover									: Sprite;		private var detailImageHolder						: Sprite;		private var closeBox								: MovieClip;				private var proxy									: Bitmap;				public var closedSender								: Signal;						private var direction								: String;				public var detailImage								: ContentDisplay;		public var detailTag								: CaretTextTag;		public var detailCopy								: DetailCopyBlock;				public static const UP_RIGHT						: String = "UP_RIGHT";		public static const UP_LEFT							: String = "UP_LEFT";		public static const DOWN_RIGHT						: String = "DOWN_RIGHT";		public static const DOWN_LEFT						: String = "DOWN_LEFT";				public var transitioned								: Signal;		public var open										: Boolean = false;		private var gradientMode							: String;				public function AmenityDetail()		{			transitioned = new Signal();			closedSender = new Signal();			if (stage) { init(); } else { addEventListener(Event.ADDED_TO_STAGE, init); }			}				private function init(e:Event=null):void		{			holder = new Sprite();			addChild(holder);						proxy = new Bitmap();						bg = new AmenityDetailBackground();			bg.alpha = 0;			bg.visible = false;			holder.addChild(bg);						cover = new Sprite();			cover.graphics.beginFill(0x0000FF, 0);			cover.graphics.drawRect(0, 0, bg.width * 2 + 10, bg.height * 2 + 10);			cover.visible = false;			addChild(cover);						detailImageHolder = new Sprite();			detailImageHolder.x = 10;			detailImageHolder.y = 10;			cover.addChild(detailImageHolder);						closeBox = new CloseBox();			closeBox.x = cover.width - 10;			closeBox.y = 10;			cover.addChild(closeBox);			closeBox.alpha = 0;			closeBox.useHandCursor = true;			closeBox.buttonMode = true;			closeBox.mouseChildren = false;			var closeBoxSignal:NativeSignal = new NativeSignal(this, MouseEvent.CLICK, MouseEvent);			closeBoxSignal.add(hide);						detailTag = new CaretTextTag("");			detailTag.x = 14;			detailTag.y = 330;			detailTag.alpha = 0;			detailTag.visible = false;			cover.addChild(detailTag);						detailCopy = new DetailCopyBlock();			detailCopy.x = 15;			detailCopy.y = 360;			detailCopy.alpha = 0;			detailCopy.visible = false;			cover.addChild(detailCopy);			//			var marker:Sprite = new Sprite();//			marker.graphics.beginFill(0x00FF00, 1);//			marker.graphics.drawRect(0, 0, 10, 10);//			holder.addChild(marker);					}				public function closeFrame():void		{			var speed:Number = 4;						open = false;						TweenMax.to(this, .15 * speed, { autoAlpha: 0, onComplete: function() { transitioned.dispatch(); } } );			//			TweenMax.to(detailImageHolder, .15, { autoAlpha: 0 } );//			TweenMax.to(closeBox, .15, { autoAlpha: 0 } );//			TweenMax.to(detailTag, .15, { autoAlpha: 0 } );//			TweenMax.to(detailCopy, .15, { autoAlpha: 0 } );//			//			switch (gradientMode)//			{//				case UP_RIGHT ://					TweenMax.to(bg, .15 * speed, { delay: .1 * speed, scaleX: 1, scaleY: -1, ease:Quad.easeInOut } );//					break;//				//				case UP_LEFT ://					TweenMax.to(bg, .15 * speed, { delay: .1 * speed, scaleX: -1, scaleY: -1, ease:Quad.easeInOut } );//					break;//				//				case DOWN_RIGHT ://					TweenMax.to(bg, .15 * speed, { delay: .1 * speed, scaleX: 1, scaleY: 1, ease:Quad.easeInOut } );//					break;//				//				case DOWN_LEFT ://					TweenMax.to(bg, .15 * speed, { delay: .1 * speed, scaleX: -1, scaleY: 1, ease:Quad.easeInOut } );//					break;//			}//			//			TweenMax.to(bg, .15 * speed, { delay: .2 * speed, autoAlpha: 0, onComplete: function () { transitioned.dispatch(); } } );					}						public function openFrame(which:AmenityBox, dir:String, asset:ContentDisplay, title:String, copy:String):void		{			open = true;			gradientMode = dir;						this.visible = true;			this.alpha = 1;						if (detailImageHolder.numChildren>0) { detailImageHolder.removeChildAt(0); }			detailImageHolder.alpha = 0;			detailImage = asset;			detailImageHolder.addChild(detailImage);						closeBox.alpha = 0;			closeBox.visible = false;						detailTag.alpha = 0;			detailTag.visible = false;			detailTag.text = title.toUpperCase();						detailCopy.alpha = 0;			detailCopy.visible = false;			detailCopy.name = which.name;			detailCopy.text = copy;						//			var proxydata:BitmapData = new BitmapData(this.width, this.height, false, 0xFFFFFFFF);//			proxy = new Bitmap(proxydata);//			proxydata.draw(holder);//			addChild(proxy);//			proxy.x  = 200;//			proxy.y = 200;									var ix:uint = which.index;			var pos:Point = new Point(which.x, which.y);						if (ix == 0 || ix == 1 || ix == 4 || ix == 5)			{				cover.x = 0;			}			else			{				cover.x = (244 * 2) + 20;			}						cover.visible = true;						bg.scaleX = bg.scaleY = 1;			bg.alpha = 0;			bg.visible = false;						var targetScaleX : Number = 2.040983;			var targetScaleY : Number = 2.043668;						switch (dir)			{				case UP_RIGHT :					bg.downleft.visible = false;					bg.downright.visible = false;					bg.upleft.visible = false;					bg.upright.visible = true;					holder.x = pos.x;					holder.y = pos.y + bg.height;					bg.x = 0;					bg.y = 0;					bg.scaleY = -1;					targetScaleY = -targetScaleY;					break;								case UP_LEFT :					bg.downleft.visible = false;					bg.downright.visible = false;					bg.upright.visible = false;					bg.upleft.visible = true;					holder.x = pos.x + bg.width;					holder.y = pos.y + bg.height;					bg.x = 0;					bg.y = 0;					bg.scaleX = -1;					bg.scaleY = -1;					targetScaleX = -targetScaleX;					targetScaleY = -targetScaleY;					break;								case DOWN_RIGHT :					bg.downleft.visible = false;					bg.downright.visible = true;					bg.upright.visible = false;					bg.upleft.visible = false;					holder.x = pos.x;					holder.y = pos.y;					bg.x = 0;					bg.y = 0;					break;								case DOWN_LEFT :					bg.downleft.visible = true;					bg.downright.visible = false;					bg.upright.visible = false;					bg.upleft.visible = false;					holder.x = pos.x + bg.width;					holder.y = pos.y;					bg.scaleX = -1;					targetScaleX = -targetScaleX;					break;			}						TweenMax.to(bg, .35, { autoAlpha: 1 } );			TweenMax.to(bg, .35, { delay: .25, scaleX: targetScaleX, scaleY: targetScaleY, ease:Quad.easeInOut } );			TweenMax.to(detailImageHolder, .35, { delay: .5, autoAlpha: 1 } );			TweenMax.to(closeBox, .25, { delay: .75, autoAlpha: 1 } );			TweenMax.to(detailTag, .35, { delay: .5, autoAlpha: 1 } );			TweenMax.to(detailCopy, .35, { delay: .5, autoAlpha: 1 } );					}				public function hide(e:MouseEvent=null):void		{			TweenMax.to(this, .25, { autoAlpha: 0 } );			open = false;			closedSender.dispatch();		}				public function hideQuietly():void		{			open = false;			TweenMax.to(this, .25, { autoAlpha: 0 } );		}			}}