package com.thelab.hotel32.views.amenities{	import com.greensock.events.LoaderEvent;	import com.greensock.loading.*;	import com.greensock.loading.display.ContentDisplay;	import com.thelab.hotel32.helpers.BoxGrid;	import com.thelab.hotel32.helpers.Logger;	import com.thelab.hotel32.views.BasicView;		import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;		public class AmenitiesView extends BasicView	{		private var boxArray								: Array;		private var boxgrid									: BoxGrid;		private var detail									: AmenityDetail;				private var animatedDetailClosing					: Boolean = true;				public function AmenitiesView(name:String=null)		{			super(name);		}					override public function setup():void		{			assetsLoaded.addOnce(onAssetsLoaded);			loadAssets();		}				private function onAssetsLoaded():void		{//			var grid:ContentDisplay = queue.getContent("grid");//			addChild(grid);//						makeBoxGrid();					}				private function makeBoxGrid():void		{			boxgrid = new BoxGrid(2, 4, 244, 229, 10, 10);			boxgrid.x = 86;			boxgrid.y = 10;			addChild(boxgrid);						//Logger.log(boxgrid.pointsArray.toString());						boxArray = new Array();			for (var i:int = 0; i < pageXML..boxes..box.length(); i++)			{				var boxData : XML = pageXML..boxes.box[i];				var myBox:AmenityBox = new AmenityBox(boxData.@id.toString());				myBox.index = i;								myBox.mainAsset = queue.getContent(boxData.images.@thumb);				myBox.overAsset = queue.getContent(boxData.images.@over);				myBox.detailAsset = queue.getContent(boxData.images.@detail);				myBox.title = boxData.title.toString();				myBox.detailTitle = boxData.detailTitle.toString();				myBox.detailCopy = boxData.detailCopy.toString();								myBox.clickedSender.add(onBoxClicked);								boxArray.push(myBox);				boxgrid.addToGrid(myBox);								//Logger.log("added " + myBox + "\n  title: " + myBox.title);							}						transitionStarted.add(onTransStart);			transitionFinished.add(onTransFinish);						makeAmenityDetail();					}				private function makeAmenityDetail():void		{						detail = new AmenityDetail();									addChild(detail);			detail.closedSender.add(onDetailClosed);			detail.x = boxgrid.x;			detail.y = boxgrid.y;						sendReady();		}				private function onDetailClosed():void		{			Logger.log("detail closed...",2);			navigationUpdater.dispatch(this, "");		}				private function onBoxClicked(which:AmenityBox):void		{//			boxesActive(false);						var direction:String;						switch (which.index)			{				case 0 :					direction = AmenityDetail.DOWN_RIGHT;					break;								case 1 :					direction = AmenityDetail.DOWN_LEFT;					break;								case 2 :					direction = AmenityDetail.DOWN_RIGHT;					break;								case 3 :					direction = AmenityDetail.DOWN_LEFT;						break;								case 4 :					direction = AmenityDetail.UP_RIGHT;					break;								case 5 :					direction = AmenityDetail.UP_LEFT;					break;								case 6 :					direction = AmenityDetail.UP_RIGHT;					break;								case 7 :					direction = AmenityDetail.UP_LEFT;					break;			}						if (animatedDetailClosing)			{				if (detail.open)				{					detail.transitioned.addOnce( function()					{						detail.openFrame(which, direction, which.detailAsset, which.detailTitle, which.detailCopy);					});					detail.closeFrame();									}				else				{					detail.openFrame(which, direction, which.detailAsset, which.detailTitle, which.detailCopy);				}			}			else			{				detail.openFrame(which, direction, which.detailAsset, which.detailTitle, which.detailCopy);			}						navigationUpdater.dispatch(this, which.name);		}					private function onTransStart(whichDirection:String):void		{			switch (whichDirection)			{				case TRANSITION_IN :										break;								case TRANSITION_OUT :					boxesActive(false);					detail.hideQuietly();					break;			}		}				private function onTransFinish(whichDirection:String):void		{			switch (whichDirection)			{				case TRANSITION_IN :					boxesActive(true);					Logger.log(this + "  trans finished, deepLink = " + deepLink);					if (deepLink != null) { openBox(deepLink); }					break;								case TRANSITION_OUT :										break;			}		}				private function openBox(id:String):void		{			for (var i:uint = 0; i < boxArray.length; i++)			{				if (boxArray[i].name == id)				{					boxArray[i].open();				}			}		}				private function boxesActive(val:Boolean):void		{			Logger.log("setting all boxes to " + val);			for each (var b:AmenityBox in boxArray)			{				b.active = val;			}		}	}}