package com.thelab.hotel32.views.video{	import com.greensock.TweenMax;	import com.thelab.hotel32.Main;	import com.thelab.hotel32.assets.AssetLoader;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.external.ExternalInterface;
		public class VideoHeroController extends MovieClip	{				private var _pageXML							: XML;						private var dimmer								: Sprite;		private var _autoPaused							: Boolean = false;		//		private var _asset								: String;//		private var _duration							: Number;//		private var _cuepointsXML						: XMLList;				public function VideoHeroController(host:Main, data:XML)		{			main = host;			_pageXML = data;				if (stage) { init(); } else { addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true); }		}				public function get autoPaused():Boolean		{			return _autoPaused;		}		private function init(e:Event=null):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			stage.addEventListener(Event.RESIZE, onStageResize, false, 0, true);			assetPath = AssetLoader.getInstance().basePath + AssetLoader.VIDEO_UI_ASSETS;			AssetLoader.getInstance().load(assetPath, onAssetLoaded);						onStageResize();		}				private function onAssetLoaded(e:Event):void		{	//			asset = AssetLoader.getInstance().loader.getMovieClip(assetPath);////			var ctaText:String = _playerXML..ctaText.initial.toString();//			var ctaReplayText:String = _playerXML..ctaText.replay.toString();//			myVideoBackgroundImage = new VideoBackgroundImage(_playerXML..hero, asset, ctaText, ctaReplayText);//			myVideoBackgroundImage.addEventListener(VideoBackgroundImage.VIDEO_CTA_CLICKED, onCTAClicked, false, 0, true);//			myVideoBackgroundImage.addEventListener(VideoBackgroundImage.HIDE_COMPLETE, onHideCompleteEvent, false, 0, true);//			addChild(myVideoBackgroundImage);//			//			myVideoPlayer = new VideoPlayer();//			myVideoPlayer.addEventListener(VideoPlayer.VIDEO_FINISHED, onVideoFinished, false, 0, true);//			//			myVideoPlayer.alpha = 0;//			myVideoPlayer.visible = false;//			addChild(myVideoPlayer);//						dimmer = new Sprite();			dimmer.graphics.beginFill(0x000000, 1);			dimmer.graphics.drawRect(0, 0, 960, 500);			dimmer.visible = false;			dimmer.alpha = 0;			addChild(dimmer);//		//			_asset = _playerXML..hero.@asset.toString();//			_duration = Number(_playerXML..hero.@duration);//			_cuepointsXML = _playerXML..cuepoint;			}				private function onEndIsNear(e:Event=null):void		{			myVideoPlayer.removeEventListener(VideoPlayer.THE_END_IS_NEAR, onEndIsNear);		}				private function onVideoFinished(e:Event):void		{			myVideoBackgroundImage.show(true);		}				public function autoPause():void		{			_autoPaused = true;			myVideoPlayer.forcePause();		}				public function autoUnpause():void		{			_autoPaused = false;			myVideoPlayer.playPause();		}				public function dim():void		{			TweenMax.to(dimmer, .5, { autoAlpha: .8 });		}				public function undim():void		{			TweenMax.to(dimmer, .5, { autoAlpha: 0 });					}				private function onCTAClicked(e:Event):void		{			myVideoPlayer.resetCuePoints();			myVideoPlayer.addEventListener(VideoPlayer.THE_END_IS_NEAR, onEndIsNear, false, 0, true);		}				private function onHideCompleteEvent(e:Event):void		{			trace("ON HIDE COMPLETE EVENT!\n"+e.target);			load();		}				public function playVideo():void		{			if (cuePointsXML.length() > 0)			{				player.makeCuePointManager(_pageXML..cuepoints);			}		}				private function onStageResize(e:Event=null):void		{			if (stage.stageWidth < AssetLoader.PUBLISH_WIDTH)			{				x = Math.round((AssetLoader.PUBLISH_WIDTH-stage.stageWidth)*.5);			}			else			{				x = 0;			}		}				public function hideButtons():void		{			myVideoBackgroundImage.hideButtons();		}				public function showButtons():void		{			myVideoBackgroundImage.showButtons();		}	}}