package com.thelab.hotel32.views.video{	import com.greensock.TweenMax;	import com.greensock.loading.SWFLoader;	import com.greensock.loading.VideoLoader;	import com.greensock.loading.display.ContentDisplay;	import com.thelab.hotel32.assets.AssetLoader;	import com.thelab.hotel32.assets.fonts.FontLibrary;	import com.thelab.hotel32.helpers.BasicTextField;	import com.thelab.hotel32.helpers.Logger;	import com.thelab.hotel32.nav.NavigationController;	import com.thelab.hotel32.views.BasicView;	import com.thelab.hotel32.views.ViewController;	import com.thelab.hotel32.BrandMessageClip;		import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.getClassByAlias;
	public class VideoView extends BasicView	{		public var swfLoader								: SWFLoader;		public var videoLoader								: VideoLoader;		private var posterFrame								: ContentDisplay;		private var theVideo								: ContentDisplay;		private var uiAsset									: ContentDisplay;		public var cuePointsXML								: XMLList;		private var dimmer									: Sprite;		private var player									: VideoPlayer;		private var theCTA									: VideoCTAButton;		private var wasPlaying								: Boolean;		private var brandMessage							: MovieClip;		private var showBrandMessage						: Boolean = false;				public function VideoView(name:String=null)		{			super(name);		}				override public function setup():void		{			assetsLoaded.addOnce(onAssetsLoaded);			loadAssets(true);		}				private function onAssetsLoaded():void		{						//var posterFrame:ContentDisplay = queue.getContent("poster");			//addChild(posterFrame);						swfLoader = queue.getLoader("videoUI") as SWFLoader;			videoLoader = queue.getLoader("hero") as VideoLoader;			cuePointsXML = pageXML..cuepoints.cuepoint;						brandMessage = new BrandMessageClip();			brandMessage.x = 86;			brandMessage.y = 0;			brandMessage.alpha = 0;			brandMessage.visible = false;			addChild(brandMessage);						brandMessage.holder.replay.useHandCursor = true;			brandMessage.holder.replay.buttonMode = true;			brandMessage.holder.replay.addEventListener(MouseEvent.CLICK, onReplayClick);												player = new VideoPlayer(this);			player.x = 63;			player.y = 0;			addChild(player);						player.finished.add(onVideoFinished);									ready.dispatch();					}				private function onReplayClick(e:MouseEvent):void		{			Logger.log("REPLAY VIDEO!");			showBrandMessage = false;			player.rewind();			TweenMax.to(brandMessage, .25, { autoAlpha: 0 } );			TweenMax.to(player, 1.5, { delay: .1, autoAlpha: 1, onComplete: replayVideo } );								}				private function replayVideo():void		{			player.playVideo();		}				public function handleBookingScreen(state):void		{			switch (state)			{				case true :					player.keyboardOff();					if (player.playing) 					{						wasPlaying = true;						player.playPause();					}					break;								case false :					player.keyboardOn();					if (wasPlaying) 					{ 						wasPlaying = false;						player.playPause();					}					break;			}		}				private function onVideoFinished():void		{			NavigationController.getInstance().navigateToView(ViewController.getInstance().getViewFromName(ViewController.AMENITIES_VIEW_NAME));			showBrandMessage = true;		}				override public function onTransitionStarted(direction:String):void		{			switch (direction)			{				case TRANSITION_IN :					//					break;								case TRANSITION_OUT :					player.forcePause();					player.keyboardOff();					break;			}		}				override public function onTransitionEnded(direction:String):void		{			switch (direction)			{				case TRANSITION_IN :					player.playVideo();					player.keyboardOn();					break;								case TRANSITION_OUT :					if (showBrandMessage) { swapPlayerForBrandMessage(); }					break;			}		}				private function swapPlayerForBrandMessage():void		{			player.alpha = 0;			player.visible = false;						brandMessage.alpha = 1;			brandMessage.visible = true;		}	}}