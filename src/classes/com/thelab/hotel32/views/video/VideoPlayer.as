package com.thelab.hotel32.views.video{	import com.greensock.TweenMax;	import com.greensock.loading.SWFLoader;	import com.greensock.loading.VideoLoader;	import com.greensock.loading.display.ContentDisplay;	import com.thelab.hotel32.assets.AssetController;		import flash.display.BlendMode;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.net.NetStream;		import org.osflash.signals.Signal;
		public class VideoPlayer extends Sprite	{		public var ready									: Signal;		public var finished									: Signal;				private var _host									: VideoView;		private var swfLoader								: SWFLoader;		private var videoLoader								: VideoLoader;		//		public var uiAsset									: ContentDisplay;////		public var console									: DebugConsole;				private var _data									: XMLList;		private var myCuePointManager						: CuePointManager;				private var vw 										: Number;		private var vh 										: Number;		private var vURL 									: String;		private var vLength 								: Number;		private var vTime 									: Number;				public var playing 									: Boolean;		private var _started 								: Boolean;				private var vHolder 								: ContentDisplay;		private var stream 									: NetStream;				public var volumeLevel 								: Number;						private var throbbyBG 								: MovieClip;		private var throbby 								: MovieClip;				private var myVideoUI 								: VideoControls;						public static const VIDEO_PAUSED 					: String = "VIDEO_PAUSED";		public static const VIDEO_FINISHED					: String = "VIDEO_FINISHED";		public static const SHOW_REPLAY_BUTTON				: String = "SHOW_REPLAY_BUTTON";		public static const STOP_BM_INTERACTION				: String = "STOP_BM_INTERACTION";		public static const START_BM_INTERACTION			: String = "START_BM_INTERACTION";		public static const THE_END_IS_NEAR					: String = "THE_END_IS_NEAR";				public function VideoPlayer(host:VideoView)		{				_host = host;			swfLoader = host.swfLoader;			videoLoader = host.videoLoader;			stream  = videoLoader.netStream;						videoLoader.addEventListener(VideoLoader.VIDEO_BUFFER_FULL, handleNetStatus);			videoLoader.addEventListener(VideoLoader.VIDEO_BUFFER_EMPTY, handleNetStatus);			videoLoader.addEventListener(VideoLoader.VIDEO_COMPLETE, handleNetStatus);						ready = new Signal();			finished = new Signal();					volumeLevel = AssetController.getInstance().volumeLevel;			//			trace("   --> video player got volume from AssetLoader: " + volumeLevel);//			trace("so name is " + AssetLoader.SHARED_OBJECT_NAME);			//volumeLevel = vol;						playing = false;			_started = false;						if (stage) { init(); } else { addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true); }			}				private function init(e:Event=null):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			vw = 1060;			vh = 500;						vLength = _host.duration;						vHolder = videoLoader.content;			addChild(vHolder);						setupThrobber();						myVideoUI = new VideoControls(this, swfLoader);			myVideoUI.visible = true;			myVideoUI.addEventListener(VideoControls.PLAY_PAUSE_CLICKED, playPause, false, 0, true);			myVideoUI.addEventListener(VideoControls.VOLUME_CHANGED, onVolumeChanged, false, 0, true);			myVideoUI.addEventListener(VideoControls.VIDEO_SEEK, onVideoSeek, false, 0, true);			myVideoUI.addEventListener(VideoControls.VIDEO_SCRUB, onVideoScrub, false, 0, true);			myVideoUI.addEventListener(VideoControls.START_VIDEO_SCRUB, onStartScrub, false, 0, true);			myVideoUI.addEventListener(VideoControls.END_VIDEO_SCRUB, onEndScrub, false, 0, true);			myVideoUI.addEventListener(VideoControls.REPLAY, onReplay, false, 0, true);						myVideoUI.y = vh - 122;			addChild(myVideoUI);			myVideoUI.playing = true;						ready.dispatch();		}				public function keyboardOff():void		{			myVideoUI.keyboardOff();		}				public function keyboardOn():void		{			myVideoUI.keyboardOn();		}				public function makeCuePointManager(data:XMLList):void		{						if (!myCuePointManager)			{				_data = data;				myCuePointManager = new CuePointManager(swfLoader, vLength, _data, myVideoUI.barYPosition);				myVideoUI.addChild(myCuePointManager);				myCuePointManager.addEventListener(CuePoint.CUE_POINT_CLICKED, onCuePointClicked, false, 0, true);				myCuePointManager.addEventListener(CuePointManager.CUEPOINT_TAG_CLICKED, onCuePointTagClicked, false, 0, true);				myCuePointManager.x = 39;			}		}				private function onCuePointClicked(e:Event):void		{			videoLoader.videoTime = CuePoint(e.target).time;			myCuePointManager.testCuepoint(videoLoader.videoTime);			if(!playing)			{				playPause();				myVideoUI.setPlayPauseButton(VideoControls.PAUSE_MODE);			}									}				private function onCuePointTagClicked(e:Event):void		{			//		}				public function playVideo():void		{			videoLoader.playVideo();			if (_host.cuePointsXML.length() > 0)			{				makeCuePointManager(_host.cuePointsXML);			}						addEventListener(Event.ENTER_FRAME, loadedHandler, false, 0, true);			addEventListener(Event.ENTER_FRAME, playheadHandler, false, 0, true);						_started = true;			playing = true;						myVideoUI.dispatchEvent(new Event(VideoControls.VOLUME_CHANGED));			myVideoUI.clickTrackOn();		}				private function handleNetStatus(e:Event):void {			switch (e.type)			{				case VideoLoader.VIDEO_BUFFER_FULL :					hideThrobber();					break;								case VideoLoader.VIDEO_BUFFER_EMPTY :					if (playing && started) { showThrobber(); }					break;								case VideoLoader.VIDEO_COMPLETE :					if (!myVideoUI.scrubbing)					{						videoFinished();					}						break;								default :					//					break;			}		}				private function loadedHandler(e:Event):void {			var loadedPercent:Number = stream.bytesLoaded / stream.bytesTotal;			myVideoUI.loaded = loadedPercent;						if (myCuePointManager)			{				myCuePointManager.checkCuePointsForActivation(loadedPercent);			}									if (stream.bytesLoaded == stream.bytesTotal) {				if (myCuePointManager)				{					myCuePointManager.activateAllCuePoints();				}				removeEventListener(Event.ENTER_FRAME, loadedHandler);			}					}				private function playheadHandler(e:Event):void {			var pos:Number = stream.time / vLength;			myVideoUI.playhead = pos;					if ( (vLength - stream.time) < 2 )			{				dispatchEvent(new Event(THE_END_IS_NEAR));			}						if (myCuePointManager)			{				myCuePointManager.testCuepoint(stream.time);			}						if (pos >= 1) {				removeEventListener(Event.ENTER_FRAME, playheadHandler);			}					}				/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		*		*                      Play / Pause		*		* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */				public function playPause(e:Event=null):void {			if (_started) {				if (playing) {					playing = false;					fadeOutSound();//					videoLoader.pauseVideo();					//stream.pause();				} else {					playing = true;					videoLoader.playVideo();					fadeInSound();//					stream.resume();				}			} else {				showThrobber();				_started = true;			}		}				public function forcePause():void		{			if (_started)			{				if (playing)				{					playing = false;					fadeOutSound();				}			}		}				public function resumeVideoPlayback(): void		{			stream.resume();			fadeInSound();		}				public function stopVideoPlayback () : void		{			fadeOutSound();		}				private function fadeOutSound():void {						TweenMax.to(stream, .5, { volume: 0, onComplete:pauseTheStream });		}				private function pauseTheStream () : void		{//			stream.pause();			videoLoader.pauseVideo();			dispatchEvent(new Event(VIDEO_PAUSED));		}				private function fadeInSound() : void		{						TweenMax.to(stream, .5, { volume: AssetController.getInstance().volumeLevel });		}				private function onVolumeChanged(e:Event):void {			if (playing) { videoLoader.volume = AssetController.getInstance().volumeLevel; }		}				public function replayVideo():void		{			/*			stream.seek(0);			stream.resume();			show();			myVideoUI.show();			onReplay();			*/		}				private function onReplay(e:Event=null):void 		{			/*			addEventListener(Event.ENTER_FRAME, playheadHandler, false, 0, true);			myVideoUI.clickTrackOn();			*/		}				private function onVideoSeek(e:Event):void {			videoLoader.videoTime = vLength * myVideoUI.seekPercent;		}				private function onStartScrub(e:Event):void		{			videoLoader.volume = 0;		}				private function onEndScrub(e:Event):void		{			videoLoader.volume = 1;		}				private function onVideoScrub(e:Event):void {			var t:Number = vLength * myVideoUI.scrubPercent;			videoLoader.videoTime = t;			if (myCuePointManager) myCuePointManager.testCuepoint(t);		}								/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		*		*                      Throbber		*		* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */				private function setupThrobber():void		{						// throbby			throbbyBG = new MovieClip();			throbbyBG.alpha = 1;			throbbyBG.visible = true;			throbbyBG.graphics.beginFill(0x333333, 0);			throbbyBG.graphics.drawRect(0, 0, vw, vh);						var Throbby : Class = swfLoader.getClass("com.thelab.hotel32.video.Throbber");			throbby = new Throbby();						throbby.x = vw / 2 ;			throbby.y = vh / 2 - 6;			throbby.scaleX = throbby.scaleY = .25;			throbby.gotoAndStop(1);			throbby.blendMode = BlendMode.OVERLAY;			throbby.visible = true;			throbby.alpha = 1;			throbbyBG.addChild(throbby);			addChild(throbbyBG);		}				private function showThrobber():void {			throbby.glow.play();//			TweenMax.to(throbbyBG, 1, { autoAlpha:1 } );		}				private function hideThrobber():void {					TweenMax.to(throbbyBG, 1, { autoAlpha:0, onComplete: resetThrobber } );		}				private function resetThrobber () : void		{			throbby.glow.gotoAndStop(1);		}				private function onReplayClick(e:Event):void		{			/*			myVideoUI.show();			*/		}						/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		*		*                      Miscellaneous		*		* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */				private function videoFinished():void {						myVideoUI.resetTrackClips();			hide();			finished.dispatch();			//hideThrobber();			//hideVideo();		}				public function resetCuePoints():void		{			if (myCuePointManager)			{				myCuePointManager.resetAllCuePoints();			}		}				public function hideVideo() : void		{			if (playing) 			{				playing = false;				videoLoader.pauseVideo();				hideThrobber();				hide();			}			removeEventListener(Event.ENTER_FRAME, playheadHandler);			TweenMax.to(vHolder, .5, { autoAlpha: 0 });		}				private function showVideo():void {			TweenMax.to(vHolder, .5, { delay: .1, autoAlpha:1 } );		}				public function rewind():void		{			videoLoader.gotoVideoTime(0);		}				public function show() : void		{			//TweenMax.to(this, .5, { autoAlpha: 1 } );			//dispatchEvent(new Event(START_BM_INTERACTION));		}				public function hide() : void		{//			if (playing) { videoFinished(); }			TweenMax.to(this, .25, { autoAlpha: 0, onComplete: sendVideoFinishedEvent } );		}				private function sendVideoFinishedEvent():void		{			dispatchEvent(new Event(VIDEO_FINISHED));		}					/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		*		*                      Getters / Setters		*		* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */				public function get started():Boolean { return _started; }				public function set started(val:Boolean): void 		{ 			_started = val;		}				public function get vWidth() : Number { return vw; }				public function get vHeight() : Number { return vh };				public function get videoStream() : NetStream { return stream; }					}}