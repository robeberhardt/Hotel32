package com.thelab.hotel32.assets{	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;	import br.com.stimuli.loading.loadingtypes.LoadingItem;		import com.thelab.hotel32.Main;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.net.SharedObject;	import flash.utils.Dictionary;	import flash.utils.Timer;
		public class AssetLoader extends Sprite	{		private static var instance					: AssetLoader;		private static var allowInstantiation		: Boolean;		//		private var cacheBuster						: String;				public var configXML							: XML;		private var _volumeLevel					: Number;		private var _previousVolumeLevel			: Number;		private var _savedDate						: String;		private var _savedNights					: Number;		private var _savedTime						: Date;				public var loader							: BulkLoader;		private var callbackDict					: Dictionary;		public var basePath							: String;		private var callbackFunction				: Function;				private var fvDict							: Dictionary;				public var fvMainConfig						: String;				public static const FV_MAIN_CONFIG			: String = "mainconfig"				public static const ASSETS_INITIALIZED		: String = "ASSETS_INITIALIZED";				public static const CUE_POINT_ASSET			: String = "com.thelab.hotel32.cuepointasset";		public static const CUE_POINT_TAG_ASSET		: String = "com.thelab.hotel32.cptag";				public var so								: SharedObject;		public static const SHARED_OBJECT_NAME		: String = "hotel32_cookie";				private var queue							: Array;				public function AssetLoader(name:String = "AssetLoader")		{			if (!allowInstantiation) {				throw new Error("Error: Instantiation failed: Use AssetLoader.getInstance()");			} else {				this.name = name;				init();			}		}				public static function getInstance(name:String = "AssetLoader"):AssetLoader {			if (instance == null) {				allowInstantiation = true;				instance = new AssetLoader(name);				allowInstantiation = false;			}			return instance;		}				private function init():void		{			loader = new BulkLoader("loader");			loader.addEventListener(BulkLoader.ERROR, onLoadError, false, 0, true);			callbackDict = new Dictionary();//			cacheBuster = "?" + (Math.round(Math.random() * 0xFFFFFF)).toString();			initSharedObject();		}				private function initSharedObject():void		{			so = SharedObject.getLocal(SHARED_OBJECT_NAME);			_volumeLevel = so.data.volumeLevel;			if (!_volumeLevel)			{				//trace("   --> there was nothing in the shared object :(");				so.data.volumeLevel = 1;				so.flush();			}			else			{				//trace("   --> volumeLevel loaded from shared object: " + _volumeLevel);			}						_previousVolumeLevel = so.data.previousVolumeLevel;			if (!_previousVolumeLevel)			{				so.data.previousVolumeLevel = 1;				so.flush();			}		}				public function load(key:String, callback:Function):void		{			callbackDict[key] = callback;						loader.add(key);			if (loader.get(key).status == null)			{				loader.get(key).addEventListener(BulkProgressEvent.COMPLETE, onAssetLoadComplete, false, 0, true);				loader.start();			}			else			{				callback(new Event(BulkProgressEvent.COMPLETE));			}		}				private function onAssetLoadComplete(e:Event):void		{			var item:LoadingItem = e.target as LoadingItem;			var itemKey : String = item.url.url;			var callback : Function = callbackDict[itemKey];			item.removeEventListener(BulkProgressEvent.COMPLETE, onAssetLoadComplete);			callback(e);		}				private function onLoadError(e:Event):void		{			throw new Error("Error loading " + basePath + ".");		}				public function loadFlashvars(paramObj:Object):void		{			fvDict = new Dictionary();						for (var keyStr:String in paramObj)			{				var valueStr:String = String(paramObj[keyStr]);				fvDict[keyStr]= valueStr;			}						fvMainConfig = fvDict[FV_MAIN_CONFIG];									if (fvMainConfig == null)			{				fvMainConfig = "config.xml";			}						load(fvMainConfig, onMainConfigLoaded);		}				private function onMainConfigLoaded(e:Event):void		{			configXML = loader.getXML(fvMainConfig);			basePath = configXML..assets.basepath.toString();			trace("basepath= " + basePath);			dispatchEvent(new Event(ASSETS_INITIALIZED));		}				public function writeVolumeToSO():void		{			trace("writing volume to so");			so.data.volumeLevel = _volumeLevel;			so.flush();		}				//SO saved dates		public function get savedDate():String{			_savedDate = so.data.savedDate;			return _savedDate;		}		public function set savedDate(dateStr:String):void{			_savedDate = dateStr;			so.data.savedDate = _savedDate;			so.flush();		}		//SO saved nights selected		public function get savedNights():Number{			_savedNights = so.data.savedNights;			return _savedNights;		}		public function set savedNights(value:Number):void{			_savedNights = value;			so.data.savedNights = _savedNights;			so.flush();		}		//save date object for comparing date last clicked		//		public function get savedTime():Date{			_savedTime = so.data.savedTime;			return _savedTime;		}		public function set savedTime(d:Date):void{			_savedTime = d;			so.data.savedTime = _savedTime;			so.flush();		}				public function get volumeLevel():Number		{			return _volumeLevel;		}				public function set volumeLevel(value:Number):void		{			_volumeLevel = value;		}		public function get previousVolumeLevel():Number		{			return _previousVolumeLevel;		}		public function set previousVolumeLevel(value:Number):void		{			_previousVolumeLevel = value;		}	}}