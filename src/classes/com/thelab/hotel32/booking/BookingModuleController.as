package com.thelab.hotel32.booking{	import com.greensock.TweenMax;	import com.thelab.hotel32.assets.AssetLoader;	import com.thelab.hotel32.booking.BookingModule;	import com.thelab.hotel32.helpers.CrossingManager;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;		public class BookingModuleController extends Sprite	{		private var assetPath							: String;		private var asset								: MovieClip;				public var cm									: CrossingManager;		private var bookingModule:BookingModule;				public static const ENTER_BOOKING_MODULE		: String = "ENTER_BOOKING_MODULE";		public static const LEAVE_BOOKING_MODULE		: String = "LEAVE_BOOKING_MODULE";				public function BookingModuleController(_cm:CrossingManager=null)		{			if(_cm){				cm = _cm;			}			if (stage) { init(); } else { addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true); }		}				private function init(e:Event=null):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			stage.addEventListener(Event.RESIZE, onStageResize, false, 0, true);			onStageResize();						alpha = 0;//			x = 10;			y = 4;			visible = false;						assetPath = AssetLoader.getInstance().basePath;			AssetLoader.getInstance().load(assetPath + AssetLoader.BOOKING_UI_ASSETS, onAssetLoaded);		}				private function onAssetLoaded(e:Event):void{			//			asset = AssetLoader.getInstance().loader.getMovieClip(assetPath + AssetLoader.BOOKING_UI_ASSETS);			addChild(asset);			//			bookingModule = new BookingModule(asset);			bookingModule.init();			//when user is interacting with the calendar or dropdown...need to hide promos			bookingModule.addEventListener(BookingEvent.STOP_BOOKING_INTERACTION, stopBookingInteraction);			bookingModule.addEventListener(BookingEvent.START_BOOKING_INTERACTION, startBookingInteraction);								}		private function startBookingInteraction(e:Event):void{			trace("startBookingInteraction");			if(cm){				cm.onStartInteracting();			}		}		private function stopBookingInteraction(e:Event):void{			trace("stopBookingInteraction");			if(cm){				cm.onStopInteracting();			}		}		private function onEnterRegion(e:Event):void		{			dispatchEvent(new Event(ENTER_BOOKING_MODULE));		}				private function onLeaveRegion(e:Event):void		{			dispatchEvent(new Event(LEAVE_BOOKING_MODULE));		}				public function show():void		{			TweenMax.to(this, .25, { autoAlpha: 1 } );		}				public function hide():void		{			TweenMax.to(this, .25, { autoAlpha: 0 } );		}				private function onStageResize(e:Event=null):void		{						if (stage.stageWidth < 960)			{				x = Math.round((960-stage.stageWidth)*.5) + 10;			}			else			{				x = 10;			}					}	}}