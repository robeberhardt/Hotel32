package com.thelab.hotel32.booking {	import com.thelab.hotel32.assets.AssetLoader;	import com.thelab.hotel32.helpers.DateUtilities;	import com.thelab.hotel32.helpers.TrackEvent;	import com.thelab.hotel32.helpers.Tracker;		import fl.controls.ComboBox;	import fl.data.DataProvider;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;		import nid.events.calendarEvent;	import nid.utils.dateChooser.DateChooser;	//	//	public class BookingModule extends MovieClip{		//		private var comboBox:ComboBox;		private var nightsSelected:Number = 1;		private var datePicker:DateChooser;		private var comboOpen:Boolean = false;		private var _base:MovieClip;		//private var _model:Model;		//;		public function BookingModule(base:MovieClip):void{			_base = base;		}				public function init(e:Event = null):void {			removeEventListener(Event.ADDED_TO_STAGE, init);			//Add Date Chooser			datePicker = new DateChooser();						datePicker.font = "Arial";						datePicker.WeekStart = "sunday";			_base.addChild(datePicker);			datePicker.addEventListener(calendarEvent.CHANGE, getdate);			datePicker.x = 0;			datePicker.y = 20;			//Add Number Picker			comboBox = new ComboBox();			_base.addChild(comboBox);			comboBox.x = 134;			comboBox.y = 20;			comboBox.width = 50;			var dp:DataProvider = new DataProvider([1,2,3,4,5,6,7,8,9,10,11,12,13,14]);			comboBox.dataProvider = dp;			comboBox.rowCount = 14;			comboBox.dropdown.rowHeight = 17;			comboBox.dropdownWidth = 30;				comboBox.addEventListener(Event.CHANGE, comboSelected); 						comboBox.addEventListener(Event.CLOSE, onComboClose); 			comboBox.addEventListener(Event.OPEN, onComboOpen); 			datePicker.addEventListener(DateChooser.OPEN_CALENDAR, onStartInteraction);			datePicker.addEventListener(DateChooser.CLOSE_CALENDAR, onStopInteraction);			//			var savedTime:Date = AssetLoader.getInstance().savedTime;			var elapsedHours:Number = 0;			//if certain number of hours have passed, don't display saved niughts data			if(savedTime){				var elapsedMinutes:Number = DateUtilities.elapsedMinutes( new Date(),savedTime, true);				//trace("Elapsed Minutes: "+ elapsedMinutes);				elapsedHours = elapsedMinutes/60;			}			var maxHours:Number = Number(AssetLoader.getInstance().mainXML.settings.session.timeout);			//trace("maxHoursmaxHoursmaxHours: "+ maxHours);			trace("Elapsed Hours: "+ elapsedHours );			if(elapsedHours > maxHours){				//nothing			}else{				if(AssetLoader.getInstance().savedNights){					comboBox.selectedIndex = AssetLoader.getInstance().savedNights-1;					nightsSelected = AssetLoader.getInstance().savedNights;				}			}			//			//CTA			var bookBtn:BookingButton = new BookingButton();			_base.addChild(bookBtn);			bookBtn.x = 195;			bookBtn.y = 20;			bookBtn.addEventListener(MouseEvent.CLICK, onBookingClick, false, 0 , true);		}		private function getdate(e:calendarEvent):void {			//trace("IN Date:" + e.selectedDate);		}		//		private function onBookingClick(e:MouseEvent):void{			Tracker.getInstance().track(TrackEvent.CHECK_RATES);			//			var bookingPath:String = AssetLoader.getInstance().mainXML.settings.urls.booking.url;			var urlTarget:String = AssetLoader.getInstance().mainXML.settings.urls.booking.url.@window.toString();			if (urlTarget.lastIndexOf("_") == -1) { urlTarget = "_" + urlTarget; }			var url:String = bookingPath.split("<<DATE>>").join(datePicker.selectedDate).split("<<NIGHTS>>").join(nightsSelected);				var req:URLRequest = new URLRequest(url);			navigateToURL(req, urlTarget);
		}		//		private function comboSelected(e:Event):void {			nightsSelected = comboBox.selectedItem.label;			AssetLoader.getInstance().savedNights = Number(comboBox.selectedItem.label);		}		//		private function onStartInteraction(e:Event = null):void{
			dispatchEvent(new Event(BookingEvent.START_BOOKING_INTERACTION));
		}		private function onStopInteraction(e:Event = null):void{			if(!comboOpen){				dispatchEvent(new Event(BookingEvent.STOP_BOOKING_INTERACTION));			}		}		//		private function onComboOpen(e:Event):void{			comboOpen = true;			onStartInteraction();		}		private function onComboClose(e:Event):void{			comboOpen = false;			onStopInteraction();		}	}	}