package com.thelab.hotel32.nav{	import com.asual.swfaddress.SWFAddress;	import com.asual.swfaddress.SWFAddressEvent;	import com.greensock.TweenMax;	import com.thelab.hotel32.TopNavClip;	import com.thelab.hotel32.booking.BookingButton;	import com.thelab.hotel32.booking.BookingController;	import com.thelab.hotel32.helpers.BasicButton;	import com.thelab.hotel32.helpers.Logger;	import com.thelab.hotel32.views.AppStage;	import com.thelab.hotel32.views.BasicView;	import com.thelab.hotel32.views.ViewController;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.external.ExternalInterface;		import org.osflash.signals.Signal;
		public class NavigationController extends Sprite	{				private static var instance						: NavigationController;		private static var allowInstantiation			: Boolean;				public var ready								: Signal;				public var topNav								: TopNavBar;		public var logo									: Logo;		public var phoneNumber							: PhoneNumber;		public var legalCopy							: LegalCopy;//		public var bookingButton						: BookingButton;		public var bookingController					: BookingController;//		public var offersButton							: OffersButton;				private var _section							: String;		private var _page								: String;				public static const HISTORY_MODE_NONE			: String = "HISTORY_MODE_NONE";		public static const HISTORY_MODE_PAGE			: String = "HISTORY_MODE_PAGE";		public static const HISTORY_MODE_ALL			: String = "HISTORY_MODE_ALL";				public function NavigationController(name:String = "NavigationController")		{			if (!allowInstantiation) {				throw new Error("Error: Instantiation failed: Use NavigationController.getInstance()");			} else {				this.name = name;				init();			}		}				public static function getInstance(name:String = "NavigationController"):NavigationController {			if (instance == null) {				allowInstantiation = true;				instance = new NavigationController(name);				allowInstantiation = false;			}			return instance;		}				private function init(e:Event=null):void		{			ready = new Signal();		}				public function setup():void		{			logo = new Logo();			logo.clickedSender.add(onLogoClicked);			phoneNumber = new PhoneNumber();			legalCopy = new LegalCopy();							ready.dispatch();		}				private function onLogoClicked():void		{			if (ViewController.getInstance().currentView != ViewController.getInstance().getViewFromName(ViewController.VIDEO_VIEW_NAME))			{				Logger.log("going to Video View");				NavigationController.getInstance().navigateToView(ViewController.getInstance().videoView);			}			}				public function createTopNav():void		{			Logger.log("CREATING TOP NAV");			topNav = new TopNavBar();			AppStage.getInstance().addChild(topNav);						topNav.dispatcher.add(handleTopNavClick);			topNav.bindViewsToNavButtons();						topNav.show();						bookingController = new BookingController();			bookingController.activated.add(onShieldActivated);			AppStage.getInstance().addBookingControllerToStage(bookingController);						SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleAddressChange);		}				private function onShieldActivated(val:Boolean):void		{			//topNav.active = !val;		}				public function handleUpdateFromView(which:BasicView, sub:String):void		{			Logger.log("\n" + which.name + " sends " + sub + " with length of " + sub.length + "\n", 3);									var newAddress : String = which.name;			if (sub.length > 0)			{				newAddress = newAddress.concat("/" + sub);			}						SWFAddress.removeEventListener(SWFAddressEvent.CHANGE, handleAddressChange);			SWFAddress.setHistory(false);			SWFAddress.setValue(which.name + "/" + sub);			SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleAddressChange);			SWFAddress.setHistory(true);		}				public function go(dest:String):void		{						SWFAddress.setValue(dest);		}				public function navigateToView(view:BasicView, subView:String="", historyMode:String = HISTORY_MODE_PAGE):void		{			topNav.active = false;			view.transitionFinished.addOnce( function(direction:String) { if (direction == BasicView.TRANSITION_IN) { topNav.active = true; } } );						Logger.log("\n\nBooking is " + bookingController.active);			if (bookingController.active)			{				Logger.log("CLOSING BOOKING CONTROLLER");				bookingController.closeBookingScreen();			}						var dest:String = view.name;			if (dest != ViewController.VIDEO_VIEW_NAME) { logo.active = true; } else { logo.active = false; }			if (subView.length > 0) { dest = dest.concat("/" + subView); }			switch (historyMode)			{				case HISTORY_MODE_NONE :					SWFAddress.setHistory(false);					SWFAddress.setValue(dest);					SWFAddress.setHistory(true);					break;								case HISTORY_MODE_PAGE :					SWFAddress.setValue(view.name);					SWFAddress.setHistory(false);					SWFAddress.setValue(dest);					SWFAddress.setHistory(true);					break;								case HISTORY_MODE_ALL :					SWFAddress.setValue(dest);					break;			}		}				private function handleTopNavClick(which:TopNavButton):void		{//			SWFAddress.setValue(which.name);			navigateToView(which.view);		}				private function handleAddressChange(e:SWFAddressEvent) {			var address : String = SWFAddress.getValue();			Logger.log("handling " + address);			Logger.log("next bit: " + SWFAddress.getPathNames());						var pathArray:Array = SWFAddress.getPathNames();			var viewName : String = pathArray[0];			var deepLink : String = pathArray[1];						Logger.log("viewName: " + viewName + ", deepLink: " + deepLink);						var newView:BasicView = ViewController.getInstance().getViewFromName(viewName);			if (newView != null) 			{				newView.deepLink = deepLink;				ViewController.getInstance().show(newView);				topNav.selectButton(newView.boundButton);			}		}				public function get address():Array		{			return SWFAddress.getPathNames();		}	}}